import streamlit as st
import pandas as pd
import plotly.express as px
#
# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise de Dados", layout="wide")
image1 = "logoInsper3.png"
image2 = "logoAlupar.png"

# Criar tr√™s colunas: uma vazia para empurrar as imagens para o canto direito
col1, col2, col3 = st.columns([6, 0.7, 0.5])  # Ajuste as propor√ß√µes conforme necess√°rio

# Deixar a primeira coluna vazia para alinhamento
with col1:
    st.empty()

# Exibir as duas imagens na segunda e terceira colunas, lado a lado e alinhadas √† direita
with col2:
    st.image(image1, width=88)

with col3:
    st.image(image2, width=100)
    
# Defini√ß√£o das p√°ginas
def upload_page():
    st.title("üìä An√°lise de Dados")
    
    # Personaliza√ß√£o do cabe√ßalho
    st.markdown("""
    <div style="background-color: #1f77b4; padding: 20px; border-radius: 10px;">
        <h1 style="color: white; text-align: center;">Caro Operador, Bem-Vindo!</h1>
        <p style="color: #f0f0f0; text-align: center;">Anexe os arquivos necess√°rios para come√ßar a an√°lise.</p>
    </div>
    """, unsafe_allow_html=True)

    # Upload dos arquivos separados para N√≠vel do Po√ßo e Hist√≥rico de Alarmes
    st.subheader("üìÇ Anexar Arquivo do N√≠vel do Po√ßo (CSV ou XLSX)")
    file_nivel_poco = st.file_uploader("Anexe o arquivo do N√≠vel do Po√ßo", type=['csv', 'xlsx'], key="nivel_poco")

    st.subheader("üìÇ Anexar Arquivo do Hist√≥rico de Alarmes (CSV ou XLSX)")
    file_historico_alarmes = st.file_uploader("Anexe o arquivo do Hist√≥rico de Alarmes", type=['csv', 'xlsx'], key="historico_alarmes")

    # Verificar se os arquivos foram carregados corretamente
    if file_nivel_poco and file_historico_alarmes:
        st.success("‚úÖ Ambos os arquivos foram carregados com sucesso!")
    elif file_nivel_poco or file_historico_alarmes:
        st.warning("‚ö†Ô∏è Por favor, anexe ambos os arquivos para prosseguir.")
    
    # Bot√£o para iniciar a an√°lise (vis√≠vel apenas quando ambos os arquivos est√£o carregados)
    if file_nivel_poco and file_historico_alarmes:
        # Bot√£o "An√°lise das Bombas de Drenagem e Esgotamento UHE SJO"
        st.markdown("<br><br>", unsafe_allow_html=True)
        if st.button("üîç An√°lisar os Dados"):
            try:
                # Salvar os arquivos no estado da sess√£o
                st.session_state['file_nivel_poco'] = file_nivel_poco
                st.session_state['file_historico_alarmes'] = file_historico_alarmes
                st.session_state['page'] = 'analysis'
                st.rerun()
            except Exception as e:
                st.error(f"Erro inesperado ao processar os arquivos: {e}")

# P√°gina de an√°lise dos dados
def analysis_page():
    st.title("üìà Resultados da An√°lise de Dados")
    
    # Verificar se os arquivos foram carregados
    if 'file_nivel_poco' not in st.session_state or 'file_historico_alarmes' not in st.session_state:
        st.warning("Por favor, volte para a p√°gina de upload e anexe ambos os arquivos.")
        return

    file1 = st.session_state['file_nivel_poco']
    file2 = st.session_state['file_historico_alarmes']
    
    try:
        # Ler os arquivos
        if file1.name.endswith('.csv'):
            df1 = pd.read_csv(file1)
        else:
            df1 = pd.read_excel(file1)
        
        if file2.name.endswith('.csv'):
            df2 = pd.read_csv(file2)
        else:
            df2 = pd.read_excel(file2)
        
        # Verificar se ambos os arquivos cont√™m dados
        if df1.empty or df2.empty:
            st.warning("Um ou ambos os arquivos est√£o vazios ou mal formatados.")
            return

        # Concatenar os dataframes
        combined_df = pd.concat([df1, df2], axis=0)

        # Filtrar colunas num√©ricas
        df_numeric = combined_df.select_dtypes(include=['number'])

        if df_numeric.empty:
            st.warning("Os arquivos n√£o cont√™m colunas num√©ricas para an√°lise.")
            return

        # Dashboard com Plotly
        st.subheader("üìä Dashboard de An√°lise")

        # Exibir algumas estat√≠sticas b√°sicas
        col1, col2, col3 = st.columns(3)
        col1.metric("N√∫mero de Linhas", combined_df.shape[0])
        col2.metric("N√∫mero de Colunas", combined_df.shape[1])
        col3.metric("Colunas Num√©ricas", df_numeric.shape[1])

        # Gr√°ficos com Plotly (comentados)
        # st.subheader("Gr√°ficos Interativos")

        # # Gr√°fico de linhas - Exemplo com as duas primeiras colunas num√©ricas
        # if df_numeric.shape[1] >= 2:
        #     line_fig = px.line(df_numeric, x=df_numeric.index, y=df_numeric.columns[:2],
        #                        title="Gr√°fico de Linhas",
        #                        labels={"index": "√çndice", "value": "Valor"},
        #                        template="plotly_dark")
        #     st.plotly_chart(line_fig)

        # # Gr√°fico de dispers√£o
        # if df_numeric.shape[1] >= 2:
        #     scatter_fig = px.scatter(df_numeric, x=df_numeric.columns[0], y=df_numeric.columns[1],
        #                              title="Gr√°fico de Dispers√£o",
        #                              labels={df_numeric.columns[0]: "Eixo X", df_numeric.columns[1]: "Eixo Y"},
        #                              template="plotly_dark")
        #     st.plotly_chart(scatter_fig)

        # # Gr√°fico de barras
        # bar_fig = px.bar(df_numeric, x=df_numeric.index, y=df_numeric.columns[0],
        #                  title="Gr√°fico de Barras",
        #                  labels={"index": "√çndice", df_numeric.columns[0]: df_numeric.columns[0]},
        #                  template="plotly_dark")
        # st.plotly_chart(bar_fig)
    
    except Exception as e:
        st.error(f"Erro durante a an√°lise dos dados: {e}")

    # Adicionar funcionalidade ao bot√£o "Voltar para a P√°gina Principal"
    if st.button("Voltar para a P√°gina Principal"):
        st.session_state['page'] = 'upload'
        st.rerun()

# Verificar qual p√°gina exibir
if 'page' not in st.session_state:
    st.session_state['page'] = 'upload'

if st.session_state['page'] == 'upload':
    upload_page()
elif st.session_state['page'] == 'analysis':
    analysis_page()

# Configura√ß√£o de cores e estilo
st.markdown("""
    <style>
    .css-18e3th9 {
        padding: 2rem;
    }
    .css-1d391kg {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 1rem;
    }
    .css-145kmo2 {
        color: #6c757d;
    }
    .css-1vbd788 {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        margin-top: 2rem;
    }
    .css-1vbd788:hover {
        background-color: #0056b3;
        color: white;
    }
    .css-1q8dd3e p {
        font-size: 18px;
    }
    </style>
    """, unsafe_allow_html=True)
